{"id":"../node_modules/get-assigned-identifiers/index.js","dependencies":[{"name":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\package.json","includedInParent":true,"mtime":1560835423599},{"name":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\.babelrc","includedInParent":true,"mtime":1560833030614},{"name":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\get-assigned-identifiers\\package.json","includedInParent":true,"mtime":1560832569818},{"name":"assert","loc":{"line":1,"column":21},"parent":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\get-assigned-identifiers\\index.js","resolved":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\assert\\assert.js"}],"generated":{"js":"var assert = require('assert')\n\n/**\n * Get a list of all identifiers that are initialised by this (possibly destructuring)\n * node.\n *\n * eg with input:\n *\n * var { a: [b, ...c], d } = xyz\n *\n * this returns the nodes for 'b', 'c', and 'd'\n */\nmodule.exports = function getAssignedIdentifiers (node, identifiers) {\n  assert.equal(typeof node, 'object', 'get-assigned-identifiers: node must be object')\n  assert.equal(typeof node.type, 'string', 'get-assigned-identifiers: node must have a type')\n\n  identifiers = identifiers || []\n\n  if (node.type === 'ImportDeclaration') {\n    node.specifiers.forEach(function (el) {\n      getAssignedIdentifiers(el, identifiers)\n    })\n  }\n\n  if (node.type === 'ImportDefaultSpecifier' || node.type === 'ImportNamespaceSpecifier' || node.type === 'ImportSpecifier') {\n    node = node.local\n  }\n\n  if (node.type === 'RestElement') {\n    node = node.argument\n  }\n\n  if (node.type === 'ArrayPattern') {\n    node.elements.forEach(function (el) {\n      // `el` might be `null` in case of `[x,,y] = whatever`\n      if (el) {\n        getAssignedIdentifiers(el, identifiers)\n      }\n    })\n  }\n\n  if (node.type === 'ObjectPattern') {\n    node.properties.forEach(function (prop) {\n      if (prop.type === 'Property') {\n        getAssignedIdentifiers(prop.value, identifiers)\n      } else if (prop.type === 'RestElement') {\n        getAssignedIdentifiers(prop, identifiers)\n      }\n    })\n  }\n\n  if (node.type === 'Identifier') {\n    identifiers.push(node)\n  }\n\n  return identifiers\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/get-assigned-identifiers/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}}],"sources":{"../node_modules/get-assigned-identifiers/index.js":"var assert = require('assert')\n\n/**\n * Get a list of all identifiers that are initialised by this (possibly destructuring)\n * node.\n *\n * eg with input:\n *\n * var { a: [b, ...c], d } = xyz\n *\n * this returns the nodes for 'b', 'c', and 'd'\n */\nmodule.exports = function getAssignedIdentifiers (node, identifiers) {\n  assert.equal(typeof node, 'object', 'get-assigned-identifiers: node must be object')\n  assert.equal(typeof node.type, 'string', 'get-assigned-identifiers: node must have a type')\n\n  identifiers = identifiers || []\n\n  if (node.type === 'ImportDeclaration') {\n    node.specifiers.forEach(function (el) {\n      getAssignedIdentifiers(el, identifiers)\n    })\n  }\n\n  if (node.type === 'ImportDefaultSpecifier' || node.type === 'ImportNamespaceSpecifier' || node.type === 'ImportSpecifier') {\n    node = node.local\n  }\n\n  if (node.type === 'RestElement') {\n    node = node.argument\n  }\n\n  if (node.type === 'ArrayPattern') {\n    node.elements.forEach(function (el) {\n      // `el` might be `null` in case of `[x,,y] = whatever`\n      if (el) {\n        getAssignedIdentifiers(el, identifiers)\n      }\n    })\n  }\n\n  if (node.type === 'ObjectPattern') {\n    node.properties.forEach(function (prop) {\n      if (prop.type === 'Property') {\n        getAssignedIdentifiers(prop.value, identifiers)\n      } else if (prop.type === 'RestElement') {\n        getAssignedIdentifiers(prop, identifiers)\n      }\n    })\n  }\n\n  if (node.type === 'Identifier') {\n    identifiers.push(node)\n  }\n\n  return identifiers\n}\n"},"lineCount":58}},"error":null,"hash":"662892881db10a622995d91b3805ca4b","cacheData":{"env":{}}}