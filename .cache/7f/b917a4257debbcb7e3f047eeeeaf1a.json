{"id":"../node_modules/nanosocket/index.js","dependencies":[{"name":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\package.json","includedInParent":true,"mtime":1560835423599},{"name":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\.babelrc","includedInParent":true,"mtime":1560833030614},{"name":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\nanosocket\\package.json","includedInParent":true,"mtime":1560832558096},{"name":"utilise/emitterify","loc":{"line":10,"column":27},"parent":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\nanosocket\\index.js","resolved":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\utilise\\emitterify.js"}],"generated":{"js":"module.exports = function(url = location.href.replace('http', 'ws')){\r\n  const io = emitterify({ attempt: 0 })\r\n  io.ready = io.once('connected')\r\n  io.connect = connect(io, url)\r\n  io.connect() \r\n  io.send = data => io.ready.then(socket => socket.send(data))\r\n  return io\r\n}\r\n\r\nconst emitterify = require('utilise/emitterify')\r\n    , { min, pow } = Math\r\n\r\nconst connect = (io, url) => () => {\r\n  const { WebSocket, location, setTimeout } = window\r\n      , socket = new WebSocket(url)\r\n  socket.onopen = d => io.emit('connected', socket)\r\n  socket.onmessage = d => io.emit('recv', d.data)\r\n  socket.onclose = d => { \r\n    io.ready = io.once('connected')\r\n    io.emit('disconnected')\r\n    setTimeout(io.connect, backoff(++io.attempt))\r\n  }\r\n}\r\n\r\nconst backoff = (attempt, base = 100, cap = 10000) =>\r\n  min(cap, base * pow(2, attempt))"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/nanosocket/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/nanosocket/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}}],"sources":{"../node_modules/nanosocket/index.js":"module.exports = function(url = location.href.replace('http', 'ws')){\r\n  const io = emitterify({ attempt: 0 })\r\n  io.ready = io.once('connected')\r\n  io.connect = connect(io, url)\r\n  io.connect() \r\n  io.send = data => io.ready.then(socket => socket.send(data))\r\n  return io\r\n}\r\n\r\nconst emitterify = require('utilise/emitterify')\r\n    , { min, pow } = Math\r\n\r\nconst connect = (io, url) => () => {\r\n  const { WebSocket, location, setTimeout } = window\r\n      , socket = new WebSocket(url)\r\n  socket.onopen = d => io.emit('connected', socket)\r\n  socket.onmessage = d => io.emit('recv', d.data)\r\n  socket.onclose = d => { \r\n    io.ready = io.once('connected')\r\n    io.emit('disconnected')\r\n    setTimeout(io.connect, backoff(++io.attempt))\r\n  }\r\n}\r\n\r\nconst backoff = (attempt, base = 100, cap = 10000) =>\r\n  min(cap, base * pow(2, attempt))"},"lineCount":26}},"error":null,"hash":"d2886befd2b57ab1b27f7b40119d3ae1","cacheData":{"env":{}}}