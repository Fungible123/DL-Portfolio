{"id":"../node_modules/xrs/client.js","dependencies":[{"name":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\package.json","includedInParent":true,"mtime":1560835423599},{"name":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\.babelrc","includedInParent":true,"mtime":1560833030614},{"name":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\xrs\\package.json","includedInParent":true,"mtime":1560832533139},{"name":"nanosocket","loc":{"line":2,"column":19},"parent":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\xrs\\client.js","resolved":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\nanosocket\\index.js"},{"name":"utilise/emitterify","loc":{"line":43,"column":27},"parent":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\xrs\\client.js","resolved":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\utilise\\emitterify.js"},{"name":"utilise/values","loc":{"line":44,"column":23},"parent":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\xrs\\client.js","resolved":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\utilise\\values.js"},{"name":"utilise/str","loc":{"line":45,"column":20},"parent":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\xrs\\client.js","resolved":"C:\\Users\\Pudong\\Videos\\Web Development\\Projects\\7 Portfolio\\DL-Portfolio\\node_modules\\utilise\\str.js"}],"generated":{"js":"module.exports = function({ \r\n  socket = require('nanosocket')()\r\n} = {}){\r\n  socket.id = 0\r\n\r\n  const server = emitterify({ \r\n    socket\r\n  , send: send(socket)\r\n  , get subscriptions(){\r\n      return values(socket.on)\r\n        .map(d => d && d[0])\r\n        .filter(d => d && d.type && d.type[0] == '$')\r\n    }\r\n  })\r\n  \r\n  socket\r\n    .once('disconnected')\r\n    .map(d => socket\r\n      .on('connected')\r\n      .map(reconnect(server))\r\n    )\r\n\r\n  socket\r\n    .on('recv')\r\n    .map(deserialise)\r\n    .each(({ id, data }) => {\r\n      // TODO: check/warn if no sub\r\n      const sink = socket.on[`$${id}`] && socket.on[`$${id}`][0];\r\n\r\n      data.exec ? data.exec(sink, data.value)\r\n    : !id       ? server.emit('recv', data)\r\n                : socket.emit(`$${id}`, data)\r\n    })\r\n\r\n  return server\r\n}\r\n\r\nconst deserialise = input => (new Function(`return ${input}`))()\r\n\r\nconst reconnect = server => () => server.subscriptions\r\n  .map(({ subscription }) => server.socket.send(subscription))\r\n\r\nconst emitterify = require('utilise/emitterify')\r\n    , values = require('utilise/values')\r\n    , str = require('utilise/str')\r\n    \r\nconst send = (socket, type) => (data, meta) => {\r\n  if (data instanceof window.Blob) \r\n    return binary(socket, data, meta)\r\n\r\n  const id = str(++socket.id)\r\n      , output = socket.on(`$${id}`)\r\n      , next = (data, count = 0) => socket\r\n          .send(output.source.subscription = str({ id, data, type }))\r\n          .then(d => output.emit('sent', { id, count }))\r\n\r\n  data.next \r\n    ? data.map(next).source.emit('start')\r\n    : next(data)\r\n\r\n  output\r\n    .source\r\n    .once('stop')\r\n    .filter(reason => reason != 'CLOSED')\r\n    .map(d => send(socket, 'UNSUBSCRIBE')(id)\r\n      // TODO: also force stop on close of server created sub (?)\r\n      .filter((d, i, n) => n.source.emit('stop', 'CLOSED'))\r\n    )\r\n\r\n  return output\r\n}\r\n\r\nconst binary = (socket, blob, meta, start = 0, blockSize = 1024) => {\r\n  const output = emitterify().on('recv')\r\n      , next = id => () =>  \r\n          start >= blob.size \r\n            ? output.emit('sent', { id })\r\n            : ( socket.send(blob.slice(start, start += blockSize))\r\n              , window.setTimeout(next(id))\r\n              )\r\n\r\n  send(socket, 'BINARY')({ size: blob.size, meta })\r\n    .on('sent', ({ id }) => next(id)())\r\n    .on('progress', received => output.emit('progress', { received, total: blob.size }))\r\n    .map(output.next)\r\n    .source\r\n    .until(output.once('stop'))\r\n\r\n  return output\r\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/xrs/client.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/xrs/client.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}}],"sources":{"../node_modules/xrs/client.js":"module.exports = function({ \r\n  socket = require('nanosocket')()\r\n} = {}){\r\n  socket.id = 0\r\n\r\n  const server = emitterify({ \r\n    socket\r\n  , send: send(socket)\r\n  , get subscriptions(){\r\n      return values(socket.on)\r\n        .map(d => d && d[0])\r\n        .filter(d => d && d.type && d.type[0] == '$')\r\n    }\r\n  })\r\n  \r\n  socket\r\n    .once('disconnected')\r\n    .map(d => socket\r\n      .on('connected')\r\n      .map(reconnect(server))\r\n    )\r\n\r\n  socket\r\n    .on('recv')\r\n    .map(deserialise)\r\n    .each(({ id, data }) => {\r\n      // TODO: check/warn if no sub\r\n      const sink = socket.on[`$${id}`] && socket.on[`$${id}`][0];\r\n\r\n      data.exec ? data.exec(sink, data.value)\r\n    : !id       ? server.emit('recv', data)\r\n                : socket.emit(`$${id}`, data)\r\n    })\r\n\r\n  return server\r\n}\r\n\r\nconst deserialise = input => (new Function(`return ${input}`))()\r\n\r\nconst reconnect = server => () => server.subscriptions\r\n  .map(({ subscription }) => server.socket.send(subscription))\r\n\r\nconst emitterify = require('utilise/emitterify')\r\n    , values = require('utilise/values')\r\n    , str = require('utilise/str')\r\n    \r\nconst send = (socket, type) => (data, meta) => {\r\n  if (data instanceof window.Blob) \r\n    return binary(socket, data, meta)\r\n\r\n  const id = str(++socket.id)\r\n      , output = socket.on(`$${id}`)\r\n      , next = (data, count = 0) => socket\r\n          .send(output.source.subscription = str({ id, data, type }))\r\n          .then(d => output.emit('sent', { id, count }))\r\n\r\n  data.next \r\n    ? data.map(next).source.emit('start')\r\n    : next(data)\r\n\r\n  output\r\n    .source\r\n    .once('stop')\r\n    .filter(reason => reason != 'CLOSED')\r\n    .map(d => send(socket, 'UNSUBSCRIBE')(id)\r\n      // TODO: also force stop on close of server created sub (?)\r\n      .filter((d, i, n) => n.source.emit('stop', 'CLOSED'))\r\n    )\r\n\r\n  return output\r\n}\r\n\r\nconst binary = (socket, blob, meta, start = 0, blockSize = 1024) => {\r\n  const output = emitterify().on('recv')\r\n      , next = id => () =>  \r\n          start >= blob.size \r\n            ? output.emit('sent', { id })\r\n            : ( socket.send(blob.slice(start, start += blockSize))\r\n              , window.setTimeout(next(id))\r\n              )\r\n\r\n  send(socket, 'BINARY')({ size: blob.size, meta })\r\n    .on('sent', ({ id }) => next(id)())\r\n    .on('progress', received => output.emit('progress', { received, total: blob.size }))\r\n    .map(output.next)\r\n    .source\r\n    .until(output.once('stop'))\r\n\r\n  return output\r\n}"},"lineCount":90}},"error":null,"hash":"55ddb401342218a6de0fd9e1a3cdc434","cacheData":{"env":{}}}